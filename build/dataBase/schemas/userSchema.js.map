{"version":3,"sources":["../../../src/dataBase/schemas/userSchema.js"],"names":["schema","mongoose","Schema","userSchema","name","type","String","required","lastName","email","gender","password","profileImage","posts","Types","ObjectId","ref","timestamps","prototype","valueOf","toString","pre","next","user","bcrypt","genSalt","error","salt","hash"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,qBAASC,MAAxB;AAEA,IAAMC,UAAU,GAAG,IAAIH,MAAJ,CACjB;AACEI,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GADR;AAKEC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GALZ;AASEE,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GATT;AAaEG,EAAAA,MAAM,EAAE;AACNL,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CAAC,GAAD,EAAM,GAAN;AAFA,GAbV;AAiBEK,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GAjBZ;AAqBEK,EAAAA,YAAY,EAAE;AACZP,IAAAA,IAAI,EAAEC;AADM,GArBhB;AAwBEO,EAAAA,KAAK,EAAE,CAAC;AACNR,IAAAA,IAAI,EAAEL,MAAM,CAACc,KAAP,CAAaC,QADb;AAENC,IAAAA,GAAG,EAAE;AAFC,GAAD;AAxBT,CADiB,EA8BjB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CA9BiB,CAAnB;;AAiCAhB,qBAASa,KAAT,CAAeC,QAAf,CAAwBG,SAAxB,CAAkCC,OAAlC,GAA4C,YAAY;AACtD,SAAO,KAAKC,QAAL,EAAP;AACD,CAFD;;AAIAjB,UAAU,CAACkB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAIC,IAAI,GAAG,IAAX;;AACAC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACxCH,uBAAOI,IAAP,CAAYL,IAAI,CAACZ,QAAjB,EAA2BgB,IAA3B,EAAiC,UAAUD,KAAV,EAAiBE,IAAjB,EAAuB;AACtD,UAAIF,KAAJ,EAAW,OAAOJ,IAAI,CAACI,KAAD,CAAX;AACXH,MAAAA,IAAI,CAACZ,QAAL,GAAgBiB,IAAhB;AACAN,MAAAA,IAAI;AACL,KAJD;AAKD,GAND;AAOD,CATD;eAWenB,U","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst schema = mongoose.Schema;\r\n\r\nconst userSchema = new schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    gender: {\r\n      type: String,\r\n      enum: ['H', 'M']\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    profileImage: {\r\n      type: String,\r\n    },\r\n    posts: [{\r\n      type: schema.Types.ObjectId,\r\n      ref: 'post',\r\n    }]\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmongoose.Types.ObjectId.prototype.valueOf = function () {\r\n  return this.toString();\r\n}\r\n\r\nuserSchema.pre(\"save\", function (next) {\r\n  let user = this;\r\n  bcrypt.genSalt(10, function (error, salt) {\r\n    bcrypt.hash(user.password, salt, function (error, hash) {\r\n      if (error) return next(error);\r\n      user.password = hash;\r\n      next();\r\n    });\r\n  });\r\n});\r\n\r\nexport default userSchema;\r\n"],"file":"userSchema.js"}