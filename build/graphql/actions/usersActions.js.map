{"version":3,"sources":["../../../src/graphql/actions/usersActions.js"],"names":["Date","prototype","addDays","days","date","valueOf","setDate","getDate","createToken","userData","exp","getTime","payload","_id","id","email","name","token","jwt","sign","process","env","JWT","addUserAction","UserModel","create","newUser","console","log","updateUserAction","filter","update","findOneAndUpdate","findUserAction","findOne","doLoginAction","userName","password","currentUser","bcrypt","compare","validLogin","getUserDataAction","findById","populate"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport { UserModel } from '../../dataBase/models';\r\n\r\nDate.prototype.addDays = function (days) {\r\n  const date = new Date(this.valueOf());\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n}\r\n\r\nconst createToken = (userData) => {\r\n  const exp = new Date().addDays(5).getTime();\r\n  const payload = {\r\n    _id: userData.id,\r\n    email: userData.email,\r\n    name: userData.name,\r\n    exp,\r\n  }\r\n\r\n  const token = jwt.sign(payload, process.env.JWT);\r\n  return token;\r\n}\r\n\r\nconst addUserAction = async (userData) => {\r\n  try {\r\n    const newUser = await UserModel.create(userData);\r\n    const token = createToken(newUser);\r\n    return { token };\r\n  } catch (error) {\r\n    console.log(\"TCL: error\", error)\r\n  }\r\n};\r\n\r\nconst updateUserAction = async (filter, update) => {\r\n  try {\r\n    return await UserModel.findOneAndUpdate(filter, update, { new: true });\r\n  } catch (error) {\r\n    console.log(\"TCL: updateUserAction -> error\", error)\r\n  }\r\n}\r\n\r\nconst findUserAction = async (filter) => {\r\n  try {\r\n    return await UserModel.findOne(filter);\r\n  } catch (error) {\r\n    console.log(\"TCL: findUserAction -> error\", error)\r\n  }\r\n}\r\n\r\nconst doLoginAction = async (userName, password) => {\r\n  try {\r\n    const filter = { email: userName };\r\n    const currentUser = await findUserAction(filter);\r\n    const validLogin = await bcrypt.compare(password, currentUser.password);\r\n    if (validLogin) {\r\n      const token = createToken(currentUser);\r\n      return { token };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.log(\"TCL: doLoginAction -> error\", error)\r\n  }\r\n};\r\n\r\nconst getUserDataAction = async (userData) => {\r\n  try {\r\n    return await UserModel.findById(userData._id).populate('posts');\r\n  } catch (error) {\r\n    console.log(\"TCL: getUserDataAction -> error\", error)\r\n  }\r\n}\r\n\r\nexport {\r\n  addUserAction,\r\n  updateUserAction,\r\n  findUserAction,\r\n  doLoginAction,\r\n  getUserDataAction\r\n}"],"file":"usersActions.js"}