{"version":3,"sources":["../src/index.js"],"names":["url","process","env","DATA_BASE","mongoose","connect","useCreateIndex","useNewUrlParser","useFindAndModify","useUnifiedTopology","mongoDB","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","introspection","playground","listen","port","PORT","then"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAKA,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAxB;;AACAC,qBAASC,OAAT,CACEL,GADF,EAEE;AACEM,EAAAA,cAAc,EAAE,IADlB;AAEEC,EAAAA,eAAe,EAAE,IAFnB;AAGEC,EAAAA,gBAAgB,EAAE,KAHpB;AAIEC,EAAAA,kBAAkB,EAAE;AAJtB,CAFF;;AASA,IAAMC,OAAO,GAAGN,qBAASO,UAAzB;AACAD,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,oBAA5B,CAApB;AACAH,OAAO,CAACE,EAAR,CAAW,MAAX,EAAmB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,cAAZ,CAAN;AAAA,CAAnB;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,kBAD8B;AAE9BC,EAAAA,SAAS,EAATA,qBAF8B;AAG9BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,aAAa,EAAEA;AADC,GAHY;AAM9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,GAAT,QAASA,GAAT;AAAA,gDAAmB,6BAAWA,GAAX,CAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KANuB;AAO9BC,EAAAA,aAAa,EAAE,IAPe;AAQ9BC,EAAAA,UAAU,EAAE;AARkB,CAAjB,CAAf;AAWAT,MAAM,CAACU,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAE3B,OAAO,CAACC,GAAR,CAAY2B,IAAZ,IAAoB;AAA5B,CAAd,EAAkDC,IAAlD,CAAuD,iBAAa;AAAA,MAAV9B,GAAU,SAAVA,GAAU;AAClEa,EAAAA,OAAO,CAACG,GAAR,yCAAmChB,GAAnC;AACD,CAFD","sourcesContent":["import { ApolloServer } from 'apollo-server';\r\nimport mongoose from 'mongoose';\r\n\r\nimport typeDefs from './graphql/schema';\r\nimport resolvers from './graphql/resolvers';\r\nimport {\r\n  getContext,\r\n  AuthDirective\r\n} from './graphql/actions/authActions';\r\n\r\nconst url = process.env.DATA_BASE;\r\nmongoose.connect(\r\n  url,\r\n  {\r\n    useCreateIndex: true,\r\n    useNewUrlParser: true,\r\n    useFindAndModify: false,\r\n    useUnifiedTopology: true,\r\n  }\r\n);\r\nconst mongoDB = mongoose.connection;\r\nmongoDB.on('error', console.error.bind(console, \"Error de conexion!\"));\r\nmongoDB.on('open', () => console.log('Bd conectada'));\r\n\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  schemaDirectives: {\r\n    AuthDirective: AuthDirective\r\n  },\r\n  context: async ({ req }) => getContext(req),\r\n  introspection: true,\r\n  playground: true,\r\n});\r\n\r\nserver.listen({ port: process.env.PORT || 4000 }).then(({ url }) => {\r\n  console.log(`ğŸš€  Server ready at ${url}`);\r\n});"],"file":"index.js"}